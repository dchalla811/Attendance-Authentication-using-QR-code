generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  fullName   String
  password   String
  roleId     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       Role         @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  instructor Instructor[]
  student    Student[]
}

model Instructor {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  instructorId String        @unique @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses      Course[]
  courseClass  CourseClass[]
}

model Student {
  id          Int             @id @default(autoincrement())
  userId      Int             @unique
  studentId   String          @unique @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     StudentCourse[]
  attendances Attendance[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  creditHours Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course[]
}

model Course {
  id             Int             @id @default(autoincrement())
  subjectId      Int
  instructorId   Int?
  semester       Semester
  year           Int             @db.Year
  classStartTime DateTime        @db.Time
  classEndTime   DateTime        @db.Time
  isCompleted    Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  instructor     Instructor?     @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  students       StudentCourse[]
  courseClasses  CourseClass[]
  Attendance     Attendance[]
}

model StudentCourse {
  studentId Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([studentId, courseId])
}

model CourseClass {
  id         Int          @id @default(autoincrement())
  courseId   Int
  createdBy  Int
  code       String
  uuid       String       @default(uuid())
  startedAt  DateTime     @default(now())
  endedAt    DateTime?
  instructor Instructor   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  course     Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Attendance Attendance[]
}

model Attendance {
  id            Int              @id @default(autoincrement())
  courseId      Int
  studentId     Int
  courseClassId Int
  time          DateTime         @db.Time
  status        AttendanceStatus @default(ABSENT)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student       Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseClass   CourseClass      @relation(fields: [courseClassId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId, courseClassId])
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Semester {
  FALL
  SPRING
  SUMMER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
